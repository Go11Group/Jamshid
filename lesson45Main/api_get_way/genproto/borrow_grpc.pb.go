// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: borrow.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BorrowServiceClient is the client API for BorrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowServiceClient interface {
	CreateBorrow(ctx context.Context, in *CreateBorrowRequest, opts ...grpc.CallOption) (*Void, error)
	UpdateBorrow(ctx context.Context, in *UpdatedBorrowRequest, opts ...grpc.CallOption) (*Void, error)
	DeleteBorrow(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Void, error)
	GetBorrow(ctx context.Context, in *BorrowFilterRequest, opts ...grpc.CallOption) (*BorrowsResponse, error)
}

type borrowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowServiceClient(cc grpc.ClientConnInterface) BorrowServiceClient {
	return &borrowServiceClient{cc}
}

func (c *borrowServiceClient) CreateBorrow(ctx context.Context, in *CreateBorrowRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.BorrowService/CreateBorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) UpdateBorrow(ctx context.Context, in *UpdatedBorrowRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.BorrowService/UpdateBorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) DeleteBorrow(ctx context.Context, in *ByIdRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.BorrowService/DeleteBorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) GetBorrow(ctx context.Context, in *BorrowFilterRequest, opts ...grpc.CallOption) (*BorrowsResponse, error) {
	out := new(BorrowsResponse)
	err := c.cc.Invoke(ctx, "/proto.BorrowService/GetBorrow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowServiceServer is the server API for BorrowService service.
// All implementations must embed UnimplementedBorrowServiceServer
// for forward compatibility
type BorrowServiceServer interface {
	CreateBorrow(context.Context, *CreateBorrowRequest) (*Void, error)
	UpdateBorrow(context.Context, *UpdatedBorrowRequest) (*Void, error)
	DeleteBorrow(context.Context, *ByIdRequest) (*Void, error)
	GetBorrow(context.Context, *BorrowFilterRequest) (*BorrowsResponse, error)
	mustEmbedUnimplementedBorrowServiceServer()
}

// UnimplementedBorrowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowServiceServer struct {
}

func (UnimplementedBorrowServiceServer) CreateBorrow(context.Context, *CreateBorrowRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBorrow not implemented")
}
func (UnimplementedBorrowServiceServer) UpdateBorrow(context.Context, *UpdatedBorrowRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBorrow not implemented")
}
func (UnimplementedBorrowServiceServer) DeleteBorrow(context.Context, *ByIdRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBorrow not implemented")
}
func (UnimplementedBorrowServiceServer) GetBorrow(context.Context, *BorrowFilterRequest) (*BorrowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorrow not implemented")
}
func (UnimplementedBorrowServiceServer) mustEmbedUnimplementedBorrowServiceServer() {}

// UnsafeBorrowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowServiceServer will
// result in compilation errors.
type UnsafeBorrowServiceServer interface {
	mustEmbedUnimplementedBorrowServiceServer()
}

func RegisterBorrowServiceServer(s grpc.ServiceRegistrar, srv BorrowServiceServer) {
	s.RegisterService(&BorrowService_ServiceDesc, srv)
}

func _BorrowService_CreateBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).CreateBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BorrowService/CreateBorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).CreateBorrow(ctx, req.(*CreateBorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_UpdateBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedBorrowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).UpdateBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BorrowService/UpdateBorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).UpdateBorrow(ctx, req.(*UpdatedBorrowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_DeleteBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).DeleteBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BorrowService/DeleteBorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).DeleteBorrow(ctx, req.(*ByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_GetBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).GetBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BorrowService/GetBorrow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).GetBorrow(ctx, req.(*BorrowFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowService_ServiceDesc is the grpc.ServiceDesc for BorrowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BorrowService",
	HandlerType: (*BorrowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBorrow",
			Handler:    _BorrowService_CreateBorrow_Handler,
		},
		{
			MethodName: "UpdateBorrow",
			Handler:    _BorrowService_UpdateBorrow_Handler,
		},
		{
			MethodName: "DeleteBorrow",
			Handler:    _BorrowService_DeleteBorrow_Handler,
		},
		{
			MethodName: "GetBorrow",
			Handler:    _BorrowService_GetBorrow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "borrow.proto",
}
